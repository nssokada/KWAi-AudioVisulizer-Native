package sample;/* autogenerated by Processing revision 1281 on 2022-04-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.awt.PSurfaceAWT;
import java.awt.MouseInfo;
import java.awt.Point;
import ddf.minim.*;
import ddf.minim.analysis.*;
import ddf.minim.effects.*;
import ddf.minim.signals.*;
import ddf.minim.spi.*;
import ddf.minim.ugens.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Happier extends PApplet {











//Global variables: 
Minim minim;
AudioPlayer audio;
BeatDetect beat;
float eRadius;
float var1;
float var2;
boolean isInFullscreen;
boolean dragging;
int dragX, dragY;
Button hide, full, close;
PSurfaceAWT awtSurface;
PSurfaceAWT.SmoothCanvas smoothCanvas;

 public void setup(){
  /* size commented out by preprocessor */;
  noStroke();
  //fullScreen();
  //surface.setSize(1080,1080);
  ////noCursor(); 
  background(0);
  frameRate(30);
  /* smooth commented out by preprocessor */;
  awtSurface = (PSurfaceAWT)surface;
  smoothCanvas = (PSurfaceAWT.SmoothCanvas)awtSurface.getNative();
  smoothCanvas.getFrame().removeNotify();
  smoothCanvas.getFrame().setUndecorated(true);// Hide the window border
  smoothCanvas.getFrame().setLocation(100, 100);// Move the window
  smoothCanvas.getFrame().addNotify();
  surface.setResizable(true);
  
  // Menu Buttons
  hide = new Button(width - 115, -5, 40, 25, color(0xFFFFFF66), 5);
  full = new Button(width - 80, -5, 40, 25, color(0xFF99FF66), 5);
  close = new Button(width - 45, -5, 50, 25, color(200, 0, 0), 5);
  
  //experimenting with BeatDetect
  beat = new BeatDetect();
  ellipseMode(RADIUS);
  eRadius = 20;
  
  //AUDIO PROCESSING DONE HERE.
  minim = new Minim(this);
  audio = minim.loadFile("HappyHigh.mp3");    
  audio.loop();
}

 public void draw(){
  dashboard();
  fill(0,50);  
  noStroke();  //Disables drawing the stroke (outline).
  rect(0, 0, width, height);
  translate(width/2, height/2);    //https://processing.org/reference/translate_.html
  
  int size = audio.bufferSize();
  
  
  // BeatDetect drawing stuff
  
  beat.detect(audio.mix);
  if ( beat.isOnset() ) eRadius = 100;
  
  
  fill(204, 102, 0);
  ellipse(0, 0, eRadius, eRadius);
  eRadius *= 0.95f;
  if ( eRadius < 20 ) eRadius = 20;

  // regular for loop patterns
  
  for (int i = 0; i < size - 1; i++) {
    float angle = sin(i+var1) * 10;
    
    float x = sin(radians(i)*(1000/angle));
    float y = cos(radians(i)*(1000/angle));
    
    float x3 = sin(radians(i)*(600/angle));
    float y3 = cos(radians(i)*(600/angle));

    float x4 = sin(radians(i))*(1250/angle); 
    float y4 = cos(radians(i))*(1250/angle);
    
    float x5 = sin(radians(i))*(1400/angle); 
    float y5 = cos(radians(i))*(1400/angle);
    
// YELLOW, WHITE AND ORANGE
    fill (0xFFFFE162, 90); //yellow
    circle(x, y, audio.right.get(i)*100);
 
    fill (0xFFFFF8E5, 80); // off white
    circle(x3, y3, audio.right.get(i));
    
    fill (0xFFFFB085, 100); // pastel orange
    circle(x4, y4, audio.right.get(i)*20);
    
    for (int j = i; j > 0; j = j - 100) {
    fill (0xFFFFF8E5, 50); // white
    circle(x5, y5, audio.right.get(i)*10);
   }
 
  }
  
  var1 += 0.01f;
  var2 += 0.05f;
 
}

 public void mousePressed(){
  if(hide.isMouseOver()){
    smoothCanvas.getFrame().toBack();// Hide window
  }
  if(full.isMouseOver()){
    isInFullscreen = !isInFullscreen;
    if(isInFullscreen){
      smoothCanvas.getFrame().setLocation(1, -18);
      smoothCanvas.getFrame().setSize(displayWidth, displayHeight);
    }else{
      smoothCanvas.getFrame().setLocation(100, 100);
      smoothCanvas.getFrame().setSize(1080, 1080);
    }
  }
  if(close.isMouseOver()){
    exitActual();// Close window
  }
  // Drag window
  if(mouseY < 20){
    dragging = true;
    dragX = mouseX;
    dragY = mouseY;
  }
}

 public void mouseDragged(){
  if(dragging){
    // Get mouse position and move the window
    Point mouse = MouseInfo.getPointerInfo().getLocation();
    smoothCanvas.getFrame().setLocation(mouse.x - dragX, mouse.y - dragY);
  }
}

 public void mouseReleased(){
  dragging = false;
}

 public void dashboard(){
  background(0);
  // Draw Menu Bar
  fill(0);
  rect(0, 0, width, 20);
  hide.display();
  full.display();
  close.display();
}

// Menu Button Class
class Button{
  int xpos, ypos;
  int sizeX, sizeY;
  int buttonColor;
  int borderRadius;
  
  Button(int x, int y, int sx, int sy, int c, int br){
    xpos = x;
    ypos = y;
    sizeX = sx;
    sizeY = sy;
    buttonColor = c;
    borderRadius = br;
  }
  
   public void display(){
    fill(buttonColor);
    rect(xpos, ypos, sizeX, sizeY, borderRadius);
  }
  
   public boolean isMouseOver(){
    if(mouseX > xpos && mouseX < xpos + sizeX && mouseY > ypos && mouseY < sizeY){
      return true;
    }
    return false;
  }
}


  public void settings() { size(800, 600);
smooth(8); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Happier" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
